{"version":3,"file":"static/js/884.8cd08034.chunk.js","mappings":"8LAGaA,GAAMC,EAAAA,EAAAA,GAAO,MAAPA,CACjBC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,G,qGC4DF,UA/DqB,WAAO,IAAD,IACzB,GAA0BC,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAWC,EAAAA,EAAAA,MACXC,EAAY,oBAAGF,EAASG,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,QAM7C,IAJAC,EAAAA,EAAAA,YAAU,WACRC,EAAAA,GAAAA,eAAmBR,GAASS,MAAK,SAAAX,GAAK,OAAIC,EAASD,EAAb,GACvC,GAAE,CAACE,IAECF,EAAL,CAEA,IAAQY,EACNZ,EADMY,YAAaC,EACnBb,EADmBa,MAAOC,EAC1Bd,EAD0Bc,aAAcC,EACxCf,EADwCe,aAAcC,EACtDhB,EADsDgB,OAAQC,EAC9DjB,EAD8DiB,SAG1DC,EAASN,EAAW,yCACYA,GAClC,qDAEEO,EAAUL,EAAeA,EAAaM,MAAM,EAAG,GAAK,kBACpDC,GAAwB,GAAfN,GAAmBO,QAAQ,GAE1C,OACE,2BACE,4BACE,SAAC,KAAD,CAAMC,GAAIjB,EAAV,UACE,2CAGF,UAAC,IAAD,CAAKkB,QAAQ,OAAOC,QAAS,GAA7B,WACE,gBAAKC,IAAKR,EAAQS,IAAG,wBAAmBd,GAASe,MAAO,OACxD,4BACE,0BACGf,EADH,KACYM,EADZ,QAGA,wCAAgBE,EAAhB,QACA,sCACA,uBAAIJ,KACJ,oCACA,uBAAID,EAAOa,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,eAG7C,oDACA,2BACE,yBACE,SAAC,KAAD,CAAMT,GAAG,OAAOhB,MAAO,CAAEC,KAAMJ,EAASG,MAAMC,MAA9C,qBAIF,yBACE,SAAC,KAAD,CAAMe,GAAG,UAAUhB,MAAO,CAAEC,KAAMJ,EAASG,MAAMC,MAAjD,2BAKJ,SAAC,EAAAyB,SAAD,CAAUC,UAAU,wCAApB,UACE,SAAC,KAAD,UA9CU,CAmDnB,C,2ECjEKC,EAAU,mCAChBC,IAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAmB,mCAAG,6GAERD,IAAAA,IAAA,sCAAyCD,IAFjC,cAEzBG,EAFyB,yBAGxBA,EAASC,KAAKC,SAHU,gCAK/BC,QAAQC,MAAR,MAL+B,yDAAH,qDASnBC,EAAkB,mCAAG,WAAMC,GAAN,gGAEPR,IAAAA,IAAA,gCACID,EADJ,kBACqBS,IAHd,cAExBN,EAFwB,yBAKvBA,EAASC,KAAKC,SALS,gCAO9BC,QAAQC,MAAR,MAP8B,yDAAH,sDAWlBG,EAAc,mCAAG,WAAMC,GAAN,gGAEHV,IAAAA,IAAA,iBAAoBU,EAApB,oBAAkCX,IAF/B,cAEpBG,EAFoB,yBAGnBA,EAASC,MAHU,gCAK1BE,QAAQC,MAAM,KAAMK,SALM,yDAAH,sDASdC,EAAqB,mCAAG,WAAMF,GAAN,gGAEVV,IAAAA,IAAA,iBAAoBU,EAApB,4BAA0CX,IAFhC,cAE3BG,EAF2B,yBAG1BA,EAASC,MAHiB,gCAKjCE,QAAQC,MAAR,MALiC,yDAAH,sDASrBO,EAAqB,mCAAG,WAAMH,GAAN,gGAEVV,IAAAA,IAAA,iBAAoBU,EAApB,4BAA0CX,IAFhC,cAE3BG,EAF2B,yBAG1BA,EAASC,MAHiB,gCAKjCE,QAAQC,MAAR,MALiC,yDAAH,sDAS5BhC,EAAM,CACV2B,oBAAAA,EACAM,mBAAAA,EACAE,eAAAA,EACAG,sBAAAA,EACAC,sBAAAA,GAGF,M","sources":["components/Box.js","pages/MovieDetails.jsx","services/movies-api.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { typography, space, color, layout, flexbox, grid } from 'styled-system';\n\nexport const Box = styled('div')(\n  typography,\n  space,\n  color,\n  layout,\n  flexbox,\n  grid\n);\n","import { useEffect, useState, Suspense } from 'react';\nimport { Box } from 'components/Box';\nimport { Link, Outlet, useParams, useLocation } from 'react-router-dom';\n\nimport api from 'services/movies-api';\n\nconst MovieDetails = () => {\n  const [movie, setMovie] = useState(null);\n  const { movieId } = useParams();\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? '/home';\n\n  useEffect(() => {\n    api.fetchMovieById(movieId).then(movie => setMovie(movie));\n  }, [movieId]);\n\n  if (!movie) return;\n\n  const { poster_path, title, release_date, vote_average, genres, overview } =\n    movie;\n\n  const imgUrl = poster_path\n    ? `https://image.tmdb.org/t/p/w500${poster_path}`\n    : 'https://via.placeholder.com/395x574?text=No+poster';\n\n  const release = release_date ? release_date.slice(0, 4) : 'No release date';\n  const score = (vote_average * 10).toFixed(0);\n\n  return (\n    <main>\n      <div>\n        <Link to={backLinkHref}>\n          <button>Go back</button>\n        </Link>\n\n        <Box display=\"flex\" gridGap={15}>\n          <img src={imgUrl} alt={`The poster of ${title}`} width={300} />\n          <div>\n            <h2>\n              {title} ({release})\n            </h2>\n            <p>User Score: {score}%</p>\n            <h3>Overview</h3>\n            <p>{overview}</p>\n            <h4>Genres</h4>\n            <p>{genres.map(genre => genre.name).join(', ')}</p>\n          </div>\n        </Box>\n        <h4>Additional information</h4>\n        <ul>\n          <li>\n            <Link to=\"cast\" state={{ from: location.state.from }}>\n              Cast\n            </Link>\n          </li>\n          <li>\n            <Link to=\"reviews\" state={{ from: location.state.from }}>\n              Reviews\n            </Link>\n          </li>\n        </ul>\n        <Suspense fallback={<div>Loading...</div>}>\n          <Outlet />\n        </Suspense>\n      </div>\n    </main>\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\n\nconst API_KEY = '48c8290358fa5316a044ddee2fc9cc6f';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const fetchTrendingMovies = async () => {\n  try {\n    const response = await axios.get(`/trending/movie/day?api_key=${API_KEY}`);\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const fetchMoviesByQuery = async query => {\n  try {\n    const response = await axios.get(\n      `/search/movie?api_key=${API_KEY}&query=${query}`\n    );\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const fetchMovieById = async id => {\n  try {\n    const response = await axios.get(`/movie/${id}?api_key=${API_KEY}`);\n    return response.data;\n  } catch (error) {\n    console.error(error.message);\n  }\n};\n\nexport const fetchMovieCreditsById = async id => {\n  try {\n    const response = await axios.get(`/movie/${id}/credits?api_key=${API_KEY}`);\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const fetchMovieReviewsById = async id => {\n  try {\n    const response = await axios.get(`/movie/${id}/reviews?api_key=${API_KEY}`);\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nconst api = {\n  fetchTrendingMovies,\n  fetchMoviesByQuery,\n  fetchMovieById,\n  fetchMovieCreditsById,\n  fetchMovieReviewsById,\n};\n\nexport default api;\n"],"names":["Box","styled","typography","space","color","layout","flexbox","grid","useState","movie","setMovie","movieId","useParams","location","useLocation","backLinkHref","state","from","useEffect","api","then","poster_path","title","release_date","vote_average","genres","overview","imgUrl","release","slice","score","toFixed","to","display","gridGap","src","alt","width","map","genre","name","join","Suspense","fallback","API_KEY","axios","fetchTrendingMovies","response","data","results","console","error","fetchMoviesByQuery","query","fetchMovieById","id","message","fetchMovieCreditsById","fetchMovieReviewsById"],"sourceRoot":""}